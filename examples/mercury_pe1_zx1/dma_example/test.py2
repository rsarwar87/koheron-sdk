#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
import os
import time
from koheron import connect, command

import matplotlib
matplotlib.use('TKAgg')
from matplotlib import pyplot as plt
from matplotlib.lines import Line2D

class DmaDriver(object):
    def __init__(self, client):
        self.client = client
        self.n = 8*1024*1024
        self.adc = np.zeros((self.n))
        self.dac = np.zeros((self.n))

    @command()
    def get_dna(self):
        return self.client.recv_uint64()

    @command()
    def get_forty_two(self):
        return self.client.recv_uint32()

    def set_data(self):
        dac_data = np.uint32(np.mod(np.floor(32768 * self.dac) + 32768, 65536) + 32768)
        self.set_mm2s_data(dac_data[::2] + 65536 * dac_data[1::2])

    def get_data(self):
        data = self.get_s2mm_data()
        self.adc[::2] = (np.int32(data % 65536) - 32768) % 65536 - 32768
        self.adc[1::2] = (np.int32(data >> 16) - 32768) % 65536 - 32768

    @command()
    def set_mm2s_data(self, data):
        pass

    @command()
    def get_s2mm_data(self):
        return self.client.recv_array(self.n/2, dtype='uint32')

    @command()
    def stop_dma(self):
        pass

    @command()
    def start_dma(self):
        pass

if __name__ == "__main__":
    host = os.getenv('HOST', '192.168.1.90')
    client = connect(host, 'PE1_XZ1_7030_DMA', restart=True)
    driver = DmaDriver(client)

    print ("Print fortytwo: {}".format(driver.get_forty_two()))
    print ("Print FPGA ID: {}".format(driver.get_dna()))

#    driver.adcSpiInitialize()

#    print("Get ADC data ({} points)".format(driver.n))
#    driver.start_dma_s2mm()

#    driver.adcSpiInitialize()

#    print("Get ADC data ({} points)".format(driver.n))
#    driver.start_dma_s2mm()
#    driver.get_s2mm_data()
#    driver.stop_dma_s2mm()
    
#    fs = 250e6
#   t = np.arange(driver.n/4) / fs
#   n_pts = 100000
#   plt.plot(1e6 * t[0:n_pts], driver.adc0[0:n_pts], marker=".")
#   plt.plot(1e6 * t[0:n_pts], driver.adc1[0:n_pts], marker=".")
#   plt.plot(1e6 * t[0:n_pts], driver.adc2[0:n_pts], marker=".")
#   plt.plot(1e6 * t[0:n_pts], driver.adc3[0:n_pts], marker=".")
#   plt.legend(['ADC0', 'ADC1','ADC2', 'ADC3' ])
#   plt.xlabel('Time (us)')
#   plt.ylabel('ADC Raw data')
#   plt.show()

