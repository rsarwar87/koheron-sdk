/// interfacecommon.cpp
///
/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#include "interface_common.hpp"

#include <commands.hpp>
#include <session.hpp>

namespace koheron {

/////////////////////////////////////
// set_led

template<>
int Driver<driver_id_of<Common>>::
        execute_operation<Driver<driver_id_of<Common>>::SET_LED>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_led.value = std::get<1>(args_tuple0);

        __Common.set_led(args_set_led.value);
    return 0;

}

/////////////////////////////////////
// get_led

template<>
int Driver<driver_id_of<Common>>::
        execute_operation<Driver<driver_id_of<Common>>::GET_LED>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<2, 1>(__Common.get_led());

}

/////////////////////////////////////
// init

template<>
int Driver<driver_id_of<Common>>::
        execute_operation<Driver<driver_id_of<Common>>::INIT>(Command& cmd)
{
    (void)cmd;
    
        __Common.init();
    return 0;

}

/////////////////////////////////////
// get_instrument_config

template<>
int Driver<driver_id_of<Common>>::
        execute_operation<Driver<driver_id_of<Common>>::GET_INSTRUMENT_CONFIG>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<2, 3>(__Common.get_instrument_config());

}

/////////////////////////////////////
// ip_on_leds

template<>
int Driver<driver_id_of<Common>>::
        execute_operation<Driver<driver_id_of<Common>>::IP_ON_LEDS>(Command& cmd)
{
    (void)cmd;
    
        __Common.ip_on_leds();
    return 0;

}



int Driver<driver_id_of<Common>>::execute(Command& cmd)
{
    std::lock_guard<std::mutex> lock(mutex);

    switch(cmd.operation) {
case SET_LED: {
        return execute_operation<SET_LED>(cmd);
      }
case GET_LED: {
        return execute_operation<GET_LED>(cmd);
      }
case INIT: {
        return execute_operation<INIT>(cmd);
      }
case GET_INSTRUMENT_CONFIG: {
        return execute_operation<GET_INSTRUMENT_CONFIG>(cmd);
      }
case IP_ON_LEDS: {
        return execute_operation<IP_ON_LEDS>(cmd);
      }

      case common_op_num:
      default:
          return -1;
    }
}

} // namespace koheron