/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __DRIVERS_MEMORY_HPP__
#define __DRIVERS_MEMORY_HPP__

#include <array>
#include <tuple>
#include <cstdint>

#include <zynq_fclk.hpp>

extern "C" {
  #include <sys/mman.h> // PROT_READ, PROT_WRITE
}

namespace mem {
constexpr size_t control = 0;
constexpr uintptr_t control_addr = 0x60000000;
constexpr uint32_t control_range = 4*1024;
constexpr uint32_t control_nblocks = 1;
constexpr size_t status = 1;
constexpr uintptr_t status_addr = 0x50000000;
constexpr uint32_t status_range = 4*1024;
constexpr uint32_t status_nblocks = 1;
constexpr size_t xadc = 2;
constexpr uintptr_t xadc_addr = 0x43C00000;
constexpr uint32_t xadc_range = 64*1024;
constexpr uint32_t xadc_nblocks = 1;
constexpr size_t ram_mm2s = 3;
constexpr uintptr_t ram_mm2s_addr = 0x30000000;
constexpr uint32_t ram_mm2s_range = 128*1024*1024;
constexpr uint32_t ram_mm2s_nblocks = 1;
constexpr size_t ram_s2mm = 4;
constexpr uintptr_t ram_s2mm_addr = 0x38000000;
constexpr uint32_t ram_s2mm_range = 128*1024*1024;
constexpr uint32_t ram_s2mm_nblocks = 1;
constexpr size_t dma = 5;
constexpr uintptr_t dma_addr = 0x80400000;
constexpr uint32_t dma_range = 64*1024;
constexpr uint32_t dma_nblocks = 1;
constexpr size_t axi_hp0 = 6;
constexpr uintptr_t axi_hp0_addr = 0xF8008000;
constexpr uint32_t axi_hp0_range = 4*1024;
constexpr uint32_t axi_hp0_nblocks = 1;
constexpr size_t axi_hp2 = 7;
constexpr uintptr_t axi_hp2_addr = 0xF800A000;
constexpr uint32_t axi_hp2_range = 4*1024;
constexpr uint32_t axi_hp2_nblocks = 1;
constexpr size_t ocm_mm2s = 8;
constexpr uintptr_t ocm_mm2s_addr = 0xFFFF0000;
constexpr uint32_t ocm_mm2s_range = 32*1024;
constexpr uint32_t ocm_mm2s_nblocks = 1;
constexpr size_t ocm_s2mm = 9;
constexpr uintptr_t ocm_s2mm_addr = 0xFFFF8000;
constexpr uint32_t ocm_s2mm_range = 32*1024;
constexpr uint32_t ocm_s2mm_nblocks = 1;
constexpr size_t sclr = 10;
constexpr uintptr_t sclr_addr = 0xF8000000;
constexpr uint32_t sclr_range = 64*1024;
constexpr uint32_t sclr_nblocks = 1;


constexpr size_t count = 11;

constexpr std::array<std::tuple<uintptr_t, uint32_t, uint32_t, uint32_t>, count> memory_array = {{
    std::make_tuple(control_addr, control_range, PROT_READ|PROT_WRITE, control_nblocks),
        std::make_tuple(status_addr, status_range, PROT_READ|PROT_WRITE, status_nblocks),
        std::make_tuple(xadc_addr, xadc_range, PROT_READ|PROT_WRITE, xadc_nblocks),
        std::make_tuple(ram_mm2s_addr, ram_mm2s_range, PROT_READ|PROT_WRITE, ram_mm2s_nblocks),
        std::make_tuple(ram_s2mm_addr, ram_s2mm_range, PROT_READ|PROT_WRITE, ram_s2mm_nblocks),
        std::make_tuple(dma_addr, dma_range, PROT_READ|PROT_WRITE, dma_nblocks),
        std::make_tuple(axi_hp0_addr, axi_hp0_range, PROT_READ|PROT_WRITE, axi_hp0_nblocks),
        std::make_tuple(axi_hp2_addr, axi_hp2_range, PROT_READ|PROT_WRITE, axi_hp2_nblocks),
        std::make_tuple(ocm_mm2s_addr, ocm_mm2s_range, PROT_READ|PROT_WRITE, ocm_mm2s_nblocks),
        std::make_tuple(ocm_s2mm_addr, ocm_s2mm_range, PROT_READ|PROT_WRITE, ocm_s2mm_nblocks),
        std::make_tuple(sclr_addr, sclr_range, PROT_READ|PROT_WRITE, sclr_nblocks)
        }};

} // namespace mem

namespace reg {
// -- Control offsets
constexpr uint32_t led = 0;
static_assert(led < mem::control_range, "Invalid control register offset led");

// -- Status offsets
constexpr uint32_t forty_two = 8;
static_assert(forty_two < mem::status_range, "Invalid status register offset forty_two");


constexpr uint32_t dna = 0;
} // namespace reg

namespace prm {
constexpr uint32_t fclk1 = 100000000;
constexpr uint32_t fclk0 = 125000000;


} // namespace prm

namespace zynq_clocks {

inline void set_clocks(ZynqFclk& fclk) {

fclk.set("fclk0", 125000000);
fclk.set("fclk1", 100000000);


}
}

// -- JSONified config
constexpr auto CFG_JSON = "{\"name\":\"PE1_XZ1_7030_DMA\",\"parameters\":{\"fclk1\":100000000,\"fclk0\":125000000},\"status_registers\":[\"forty_two\"],\"drivers\":[\"drivers/common.hpp\",\"../dma_example.hpp\"],\"version\":\"0.1.1\",\"control_registers\":[\"led\"],\"memory\":[{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"control\",\"offset\":\"0x60000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"status\",\"offset\":\"0x50000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"xadc\",\"offset\":\"0x43C00000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"128M\",\"n_blocks\":1,\"name\":\"ram_mm2s\",\"offset\":\"0x30000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"128M\",\"n_blocks\":1,\"name\":\"ram_s2mm\",\"offset\":\"0x38000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"dma\",\"offset\":\"0x80400000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"axi_hp0\",\"offset\":\"0xF8008000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"axi_hp2\",\"offset\":\"0xF800A000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"ocm_mm2s\",\"offset\":\"0xFFFF0000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"ocm_s2mm\",\"offset\":\"0xFFFF8000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"sclr\",\"offset\":\"0xF8000000\"}],\"board\":\"boards/mercury_zx1_pe1\"}";

#endif // __DRIVERS_MEMORY_HPP__