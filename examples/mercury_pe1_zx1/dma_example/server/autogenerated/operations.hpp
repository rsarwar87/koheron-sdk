/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __OPERATIONS_HPP__
#define __OPERATIONS_HPP__

#include <././drivers/common.hpp>
#include <././../dma_example.hpp>


namespace op {
namespace Common {
    constexpr uint32_t set_led = (2 << 16) + 0;
    constexpr uint32_t get_led = (2 << 16) + 1;
    constexpr uint32_t init = (2 << 16) + 2;
    constexpr uint32_t get_instrument_config = (2 << 16) + 3;
    constexpr uint32_t ip_on_leds = (2 << 16) + 4;
    }
namespace DmaExample {
    constexpr uint32_t set_dac_data = (3 << 16) + 0;
    constexpr uint32_t set_descriptor_mm2s = (3 << 16) + 1;
    constexpr uint32_t set_descriptor_s2mm = (3 << 16) + 2;
    constexpr uint32_t set_descriptors = (3 << 16) + 3;
    constexpr uint32_t start_dma = (3 << 16) + 4;
    constexpr uint32_t stop_dma = (3 << 16) + 5;
    constexpr uint32_t get_adc_data = (3 << 16) + 6;
    constexpr uint32_t get_dna = (3 << 16) + 7;
    constexpr uint32_t set_leds = (3 << 16) + 8;
    constexpr uint32_t get_leds = (3 << 16) + 9;
    constexpr uint32_t set_led = (3 << 16) + 10;
    constexpr uint32_t get_forty_two = (3 << 16) + 11;
    }

}

// Type checking
template<uint32_t id> struct arg_types;
template<uint32_t id> using arg_types_t = typename arg_types<id>::type;
 template<uint32_t id> struct ret_type;
template<uint32_t id> using ret_type_t = typename ret_type<id>::type;

template<>
    struct arg_types<op::Common::set_led> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::Common::set_led> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::Common::get_led> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::get_led> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::Common::init> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::init> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::Common::get_instrument_config> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::get_instrument_config> {
        using type = std::decay_t<std::string>;
    };

    template<>
    struct arg_types<op::Common::ip_on_leds> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::ip_on_leds> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::set_dac_data> {
        using type = std::tuple<std::vector<uint32_t>>;
    };

    template<>
    struct ret_type<op::DmaExample::set_dac_data> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::set_descriptor_mm2s> {
        using type = std::tuple<uint32_t,uint32_t,uint32_t>;
    };

    template<>
    struct ret_type<op::DmaExample::set_descriptor_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::set_descriptor_s2mm> {
        using type = std::tuple<uint32_t,uint32_t,uint32_t>;
    };

    template<>
    struct ret_type<op::DmaExample::set_descriptor_s2mm> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::set_descriptors> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaExample::set_descriptors> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::start_dma> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaExample::start_dma> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::stop_dma> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaExample::stop_dma> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::get_adc_data> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaExample::get_adc_data> {
        using type = std::decay_t<decltype(std::declval<DmaExample>().get_adc_data())>;
    };

    template<>
    struct arg_types<op::DmaExample::get_dna> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaExample::get_dna> {
        using type = std::decay_t<uint64_t>;
    };

    template<>
    struct arg_types<op::DmaExample::set_leds> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::DmaExample::set_leds> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::get_leds> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaExample::get_leds> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::DmaExample::set_led> {
        using type = std::tuple<uint32_t,bool>;
    };

    template<>
    struct ret_type<op::DmaExample::set_led> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaExample::get_forty_two> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaExample::get_forty_two> {
        using type = std::decay_t<uint32_t>;
    };

    

#endif // __OPERATIONS_HPP__