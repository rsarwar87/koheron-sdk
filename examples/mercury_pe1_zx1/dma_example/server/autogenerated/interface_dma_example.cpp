/// interfacedma_example.cpp
///
/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#include "interface_dma_example.hpp"

#include <commands.hpp>
#include <session.hpp>

namespace koheron {

/////////////////////////////////////
// set_dac_data

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::SET_DAC_DATA>(Command& cmd)
{
    (void)cmd;
        if (cmd.session->recv(args_set_dac_data.dac_data, cmd) < 0) {
        return -1;
    }


        __DmaExample.set_dac_data(args_set_dac_data.dac_data);
    return 0;

}

/////////////////////////////////////
// set_descriptor_mm2s

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::SET_DESCRIPTOR_MM2S>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t, uint32_t, uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t, uint32_t, uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_descriptor_mm2s.idx = std::get<1>(args_tuple0);
    args_set_descriptor_mm2s.buffer_address = std::get<2>(args_tuple0);
    args_set_descriptor_mm2s.buffer_length = std::get<3>(args_tuple0);

        __DmaExample.set_descriptor_mm2s(args_set_descriptor_mm2s.idx, args_set_descriptor_mm2s.buffer_address, args_set_descriptor_mm2s.buffer_length);
    return 0;

}

/////////////////////////////////////
// set_descriptor_s2mm

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::SET_DESCRIPTOR_S2MM>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t, uint32_t, uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t, uint32_t, uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_descriptor_s2mm.idx = std::get<1>(args_tuple0);
    args_set_descriptor_s2mm.buffer_address = std::get<2>(args_tuple0);
    args_set_descriptor_s2mm.buffer_length = std::get<3>(args_tuple0);

        __DmaExample.set_descriptor_s2mm(args_set_descriptor_s2mm.idx, args_set_descriptor_s2mm.buffer_address, args_set_descriptor_s2mm.buffer_length);
    return 0;

}

/////////////////////////////////////
// set_descriptors

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::SET_DESCRIPTORS>(Command& cmd)
{
    (void)cmd;
    
        __DmaExample.set_descriptors();
    return 0;

}

/////////////////////////////////////
// start_dma

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::START_DMA>(Command& cmd)
{
    (void)cmd;
    
        __DmaExample.start_dma();
    return 0;

}

/////////////////////////////////////
// stop_dma

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::STOP_DMA>(Command& cmd)
{
    (void)cmd;
    
        __DmaExample.stop_dma();
    return 0;

}

/////////////////////////////////////
// get_adc_data

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::GET_ADC_DATA>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<3, 6>(__DmaExample.get_adc_data());

}

/////////////////////////////////////
// get_dna

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::GET_DNA>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<3, 7>(__DmaExample.get_dna());

}

/////////////////////////////////////
// set_leds

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::SET_LEDS>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_leds.led_value = std::get<1>(args_tuple0);

        __DmaExample.set_leds(args_set_leds.led_value);
    return 0;

}

/////////////////////////////////////
// get_leds

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::GET_LEDS>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<3, 9>(__DmaExample.get_leds());

}

/////////////////////////////////////
// set_led

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::SET_LED>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t, bool>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t, bool>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_led.index = std::get<1>(args_tuple0);
    args_set_led.status = std::get<2>(args_tuple0);

        __DmaExample.set_led(args_set_led.index, args_set_led.status);
    return 0;

}

/////////////////////////////////////
// get_forty_two

template<>
int Driver<driver_id_of<DmaExample>>::
        execute_operation<Driver<driver_id_of<DmaExample>>::GET_FORTY_TWO>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<3, 11>(__DmaExample.get_forty_two());

}



int Driver<driver_id_of<DmaExample>>::execute(Command& cmd)
{
    std::lock_guard<std::mutex> lock(mutex);

    switch(cmd.operation) {
case SET_DAC_DATA: {
        return execute_operation<SET_DAC_DATA>(cmd);
      }
case SET_DESCRIPTOR_MM2S: {
        return execute_operation<SET_DESCRIPTOR_MM2S>(cmd);
      }
case SET_DESCRIPTOR_S2MM: {
        return execute_operation<SET_DESCRIPTOR_S2MM>(cmd);
      }
case SET_DESCRIPTORS: {
        return execute_operation<SET_DESCRIPTORS>(cmd);
      }
case START_DMA: {
        return execute_operation<START_DMA>(cmd);
      }
case STOP_DMA: {
        return execute_operation<STOP_DMA>(cmd);
      }
case GET_ADC_DATA: {
        return execute_operation<GET_ADC_DATA>(cmd);
      }
case GET_DNA: {
        return execute_operation<GET_DNA>(cmd);
      }
case SET_LEDS: {
        return execute_operation<SET_LEDS>(cmd);
      }
case GET_LEDS: {
        return execute_operation<GET_LEDS>(cmd);
      }
case SET_LED: {
        return execute_operation<SET_LED>(cmd);
      }
case GET_FORTY_TWO: {
        return execute_operation<GET_FORTY_TWO>(cmd);
      }

      case dma_example_op_num:
      default:
          return -1;
    }
}

} // namespace koheron