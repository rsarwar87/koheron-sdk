/// interfacedma_example.hpp
///
/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __INTERFACEDMA_EXAMPLE_HPP__
#define __INTERFACEDMA_EXAMPLE_HPP__

#include <memory>
#include <mutex>

#include <driver.hpp>

#include "././../dma_example.hpp"
namespace koheron {

template<>
class Driver<driver_id_of<DmaExample>> : public DriverAbstract
{
  public:
    int execute(Command& cmd);
    template<int op> int execute_operation(Command& cmd);

    Driver(Server *server_, DmaExample& __DmaExample_)
    : DriverAbstract(driver_id_of<DmaExample>, server_)
    , __DmaExample(__DmaExample_)
    {}

    enum Operation {
        SET_DAC_DATA = 0,
        SET_DESCRIPTOR_MM2S = 1,
        SET_DESCRIPTOR_S2MM = 2,
        SET_DESCRIPTORS = 3,
        START_DMA = 4,
        STOP_DMA = 5,
        GET_ADC_DATA = 6,
        GET_DNA = 7,
        SET_LEDS = 8,
        GET_LEDS = 9,
        SET_LED = 10,
        GET_FORTY_TWO = 11,
        dma_example_op_num
    };

    std::mutex mutex;

    DmaExample& __DmaExample;

struct Argument_set_dac_data {std::vector<uint32_t> dac_data;
} args_set_dac_data;

struct Argument_set_descriptor_mm2s {uint32_t idx;
uint32_t buffer_address;
uint32_t buffer_length;
} args_set_descriptor_mm2s;

struct Argument_set_descriptor_s2mm {uint32_t idx;
uint32_t buffer_address;
uint32_t buffer_length;
} args_set_descriptor_s2mm;

struct Argument_set_descriptors {} args_set_descriptors;

struct Argument_start_dma {} args_start_dma;

struct Argument_stop_dma {} args_stop_dma;

struct Argument_get_adc_data {} args_get_adc_data;

struct Argument_get_dna {} args_get_dna;

struct Argument_set_leds {uint32_t led_value;
} args_set_leds;

struct Argument_get_leds {} args_get_leds;

struct Argument_set_led {uint32_t index;
bool status;
} args_set_led;

struct Argument_get_forty_two {} args_get_forty_two;

}; // class Interface_Dma_example

} // namespace koheron

#endif //__INTERFACEDMA_EXAMPLE_HPP__
